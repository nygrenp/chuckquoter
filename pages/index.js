import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { db } from "../firebase";
import firebase from "firebase";

export default function Home() {
  const [quotes, setQuotes] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      const response = await fetch(
        "https://api.chucknorris.io/jokes/search?query=hand"
      );
      const data = await response.json();

      return data.result;
    };

    const getCounters = async () => {
      const db = firebase.firestore();
      try {
        const snapshot = await db.collection("counters").get();
        const counters = [];
        if (snapshot) {
          snapshot.forEach((doc) => {
            const counter = {
              id: doc.id,
              ...doc.data(),
            };
            counters.push(counter);
          });
          return counters;
        }
        return [];
      } catch (error) {
        console.log("api/firestore:", error);
        return [];
      }
    };

    Promise.all([fetchData(), getCounters()]).then(([quotes, counters]) => {
      console.log(quotes);
      console.log(counters);

      setQuotes(
        quotes.map((quote) => {
          let count = 0;
          const filteredCounters = counters.filter((c) => c.id === quote.id);
          if (filteredCounters.length > 0) {
            count = filteredCounters[0].count;
          }
          return {
            ...quote,
            count,
          };
        })
      );
      setIsLoading(false);
    });
  }, []);

  const updateCounter = async (id, count) => {
    const db = firebase.firestore();

    const res = await db.collection("counters").doc(id).update({ count });

    return res;
  };

  const createCounter = async (id) => {
    const db = firebase.firestore();

    const res = await db.collection("counters").doc(id).set({ count: 0 });

    return res;
  };

  const handleClick = (id) => {
    let q = JSON.parse(JSON.stringify(quotes));
    let newCount;
    q.forEach((quote) => {
      if (quote.id === id) {
        quote.count = quote.count + 1;
        newCount = quote.count;
      }
    });

    setQuotes(q);
    if (newCount === 1) {
      createCounter(id);
    } else {
      updateCounter(id, newCount);
    }
    
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {isLoading ? (
          <div>Loading...</div>
        ) : (
          quotes.map((quote) => {
            return (
              <div key={quote.id} className="quote">
                <p>{quote.value}</p>
                <p>{quote.count}</p>
                <button onClick={() => handleClick(quote.id)}>+</button>
              </div>
            );
          })
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
